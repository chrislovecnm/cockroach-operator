# gazelle:exclude verify_boilerplate_test.go

load("@io_bazel_rules_go//go:def.bzl", "go_test")

package(default_visibility = ["//visibility:public"])

GAZELLE = "@bazel_gazelle//cmd/gazelle"

KAZEL = "@io_k8s_repo_infra//cmd/kazel"

GO = "@go_sdk//:bin/go"

GOROOT = "@go_sdk//:files"

GOFMT = "@go_sdk//:bin/gofmt"

JQ = "//hack/bin:jq"

CONTROLLER_GEN = "@io_k8s_sigs_controller_tools//cmd/controller-gen"

sh_binary(
    name = "update-deps",
    srcs = ["update-deps.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
        "$(location %s)" % JQ,
        "$(location :update-bazel)",
        # "$(location :update-deps-licenses)",
    ],
    data = [
        GAZELLE,
        GO,
        KAZEL,
        JQ,
        ":update-bazel",
        # ":update-deps-licenses",
    ],
)

sh_binary(
    name = "update-bazel",
    srcs = ["update-bazel.sh"],
    args = [
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        GAZELLE,
        KAZEL,
    ],
)

sh_binary(
    name = "update-codegen",
    srcs = ["update-codegen.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location @io_k8s_code_generator//cmd/client-gen)",
        "$(location @io_k8s_code_generator//cmd/deepcopy-gen)",
        "$(location @io_k8s_code_generator//cmd/informer-gen)",
        "$(location @io_k8s_code_generator//cmd/lister-gen)",
        "$(location @io_k8s_code_generator//cmd/defaulter-gen)",
        "$(location @io_k8s_code_generator//cmd/conversion-gen)",
        "$(location :update-bazel)",
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        ":update-bazel",
        GO,
        GOROOT,
        GAZELLE,
        KAZEL,
        "@io_k8s_code_generator//cmd/client-gen",
        "@io_k8s_code_generator//cmd/conversion-gen",
        "@io_k8s_code_generator//cmd/deepcopy-gen",
        "@io_k8s_code_generator//cmd/defaulter-gen",
        "@io_k8s_code_generator//cmd/informer-gen",
        "@io_k8s_code_generator//cmd/lister-gen",
    ],
)

sh_test(
    name = "verify-codegen",
    srcs = ["verify-codegen.sh"],
    args = [
        "$(location :update-codegen)",
        "$(location %s)" % GO,
        "$(location @io_k8s_code_generator//cmd/client-gen)",
        "$(location @io_k8s_code_generator//cmd/deepcopy-gen)",
        "$(location @io_k8s_code_generator//cmd/informer-gen)",
        "$(location @io_k8s_code_generator//cmd/lister-gen)",
        "$(location @io_k8s_code_generator//cmd/defaulter-gen)",
        "$(location @io_k8s_code_generator//cmd/conversion-gen)",
        "$(location :update-bazel)",
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        ":update-bazel",
        ":update-codegen",
        GO,
        GOROOT,
        GAZELLE,
        KAZEL,
        "@//:all-srcs",
        "@io_k8s_code_generator//cmd/client-gen",
        "@io_k8s_code_generator//cmd/conversion-gen",
        "@io_k8s_code_generator//cmd/deepcopy-gen",
        "@io_k8s_code_generator//cmd/defaulter-gen",
        "@io_k8s_code_generator//cmd/informer-gen",
        "@io_k8s_code_generator//cmd/lister-gen",
    ],
)

sh_binary(
    name = "update-crds",
    srcs = ["update-crds.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % CONTROLLER_GEN,
    ],
    data = [
        GO,
        CONTROLLER_GEN,
    ],
)

sh_test(
    name = "verify-crds",
    srcs = ["verify-crds.sh"],
    args = [
        "$(location :update-crds)",
        "$(location %s)" % GO,
        "$(location %s)" % CONTROLLER_GEN,
    ],
    data = [
        ":update-crds",
        GO,
        CONTROLLER_GEN,
        "@//:all-srcs",
    ],
)

# Gofmt rules

sh_binary(
    name = "update-gofmt",
    srcs = ["update-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
    ],
)

sh_test(
    name = "verify-gofmt",
    srcs = ["verify-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
        "@//:all-srcs",
    ],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//hack/bin:all-srcs",
        "//hack/boilerplate:all-srcs",
        "//hack/build:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)

go_test(
    name = "verify-boilerplates",
    srcs = ["verify_boilerplate_test.go"],
    data = [
        "@//:all-srcs",
    ],
    deps = ["//pkg/testutil:go_default_library"],
)
